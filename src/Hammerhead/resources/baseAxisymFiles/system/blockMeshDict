/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

mergeType points;   // Merge points instead of topology

scale   1;

//- Half angle of wedge in degrees
halfAngle 10.0;

//- Radius of pipe [m]
radius  0.2;
radius2 0.26;

y               #eval{ $radius*sin(degToRad($halfAngle)) };
z               #eval{ $radius*cos(degToRad($halfAngle)) };
minY            #eval{ -1*$y };
minZ            #eval{ -1*$z };
yWall           #eval{ $radius2*sin(degToRad($halfAngle)) };
zWall           #eval{ $radius2*cos(degToRad($halfAngle)) };
minYwall        #eval{ -1*$yWall };
minZwall        #eval{ -1*$zWall };

vertices
(
    (0 0 0)        //0
    (2 0 0)        //1
    (2 0 0)        //2
    (0  0 0)        //3
    (0  $minY $z)   //4
    (2 $minY $z)   //5
    (2 $y $z)      //6
    (0  $y $z)      //7
    
    (0  $minY $z)   //8
    (2 $minY $z)   //9
    (2 $y $z)      //10
    (0  $y $z)      //11
    (0  $minYwall $zWall)   //12
    (2 $minYwall $zWall)   //13
    (2 $yWall $zWall)      //14
    (0  $yWall $zWall)      //15
    
    (-0.5  0 0)        //16
    (-0.5  0 0)        //17
    (-0.5  $minY $z)   //18
    (-0.5  $y $z)      //19
    
    (2.5 0 0)        //20
    (2.5 0 0)        //21
    (2.5 $minY $z)   //22
    (2.5 $y $z)      //23
    
    (-0.5  $minY $z)        //24
    (-0.5  $y $z)        //25
    (-0.5  $minYwall $zWall)   //26
    (-0.5  $yWall $zWall)      //27
    
    (2.5 $minY $z)        //28
    (2.5 $y $z)        //29
    (2.5 $minYwall $zWall)   //30
    (2.5 $yWall $zWall)      //31

);

blocks
(
    hex (0 1 2 3 4 5 6 7) (500 8 100) simpleGrading (1 1 -6) 
    hex (8 9 10 11 12 13 14 15) (500 8 10) simpleGrading (1 1 6) 
    hex (16 0 3 17 18 4 7 19) (50 8 100) simpleGrading (-4 1 -6) 
    hex (1 20 21 2 5 22 23 6) (50 8 100) simpleGrading (4 1 -6) 
    hex (24 8 11 25 26 12 15 27) (50 8 10) simpleGrading (-4 1 6) 
    hex (9 28 29 10 13 30 31 14) (50 8 10) simpleGrading (4 1 6) 
);

edges
(
    arc 4 7 origin (0 0 0)
    arc 5 6 origin (2 0 0)
    arc 11 8 origin (0 0 0)
    arc 10 9 origin (2 0 0)
    arc 15 12 origin (0 0 0)
    arc 14 13 origin (2 0 0)
    arc 18 19 origin (-0.5 0 0)
    arc 22 23 origin (2.5 0 0)
    arc 25 24 origin (-0.5 0 0)
    arc 27 26 origin (-0.5 0 0)
    arc 31 30 origin (2.5 0 0)
    arc 29 28 origin (2.5 0 0)
);

boundary
(
    internal_top//0
    {
        type patch;
        faces
        (
            (18 19 7 4)
            (4 7 6 5)
            (5 6 23 22)
        );
    }
    topWall_bottom//1
    {
        type patch;
        faces
        (
            (11 8 9 10)
            (25 24 8 11)
            (10 9 28 29)
        );
    }
    topWall_top//2
    {
        type patch;
        faces
        (
            (15 12 13 14)
            (27 26 12 15)
            (14 13 30 31)
        );
    }
    leftLet//3
    {
        type patch;
        faces
        (
            (16 17 18 19)
            (24 26 27 25)
        );
    }
    rightLet//4
    {
        type patch;
        faces
        (
            (20 21 22 23)
            (28 30 31 29)
        );
    }
    front//5
    {
        type symmetryPlane;
        //type wedge;
        //neighbourPatch back;
        faces
        (
            (0 1 5 4)
            (8 9 13 12)
            (16 0 4 18)
            (24 8 12 26)
            (1 20 22 5)
            (9 28 30 13)
        );
        
        //transform rotational;
        //rotationAxis (1 0 0);
        //rotationCentre (0 0 0);
    }
    back//6
    {
        type symmetryPlane;
        //type wedge;
        //neighbourPatch front;
        faces
        (
            (3 2 6 7)
            (11 10 14 15)
            (17 3 7 19)
            (25 11 15 27)
            (2 21 23 6)
            (10 29 31 14)
        );

        //transform rotational;
        //rotationAxis (1 0 0);
        //rotationCentre (0 0 0);
    }
//    frontAndBack//5
//    {
//        type wedge;
//        faces
//        (
//            (0 1 5 4)
//            (3 2 6 7)
//            (8 9 13 12)
//            (11 10 14 15)
//            (17 3 7 19)
//            (16 0 4 18)
//            (24 8 12 26)
//            (25 11 15 27)
//            (1 20 22 5)
//            (2 21 23 6)
//            (9 28 30 13)
//            (10 29 31 14)
//        );
//    }
);

mergePatchPairs
(
//(internal_top topWall_bottom)
);


// ************************************************************************* //
